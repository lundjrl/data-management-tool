generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model crew {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "crew_username_key") @db.VarChar(255)
  duty duty?
}

model duty {
  id          Int     @id @default(autoincrement())
  name        String?
  crewmate_id Int     @unique
  crew        crew    @relation(fields: [crewmate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model monster {
  id            Int      @id @default(autoincrement())
  name          String?
  is_skinwalker Boolean?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model what {
  test_col String?

  @@ignore
}

model cat {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(50)
  age        Int?
  coat_color String @db.VarChar(255)
}

model test_table {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(50)
  age  String? @db.VarChar
}

model test_table_two {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(50)
  age  String? @db.VarChar
}

model test_table_five {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(50)
  age  String? @db.VarChar
}

model test_table_four {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(50)
  age  String? @db.VarChar
}

model test_table_seven {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(50)
  age              String?           @db.VarChar
  test_table_eight test_table_eight?
}

model test_table_six {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(50)
  age  String? @db.VarChar
}

model test_table_three {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(50)
  age  String? @db.VarChar
}

model test_table_eight {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(50)
  test_table_seven test_table_seven @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_test_table_seven")
}
